/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DexProtocolSummary = {
  name?: string | undefined;
  displayName?: string | undefined;
  disabled?: boolean | undefined;
  logo?: string | undefined;
  address?: string | undefined;
  url?: string | undefined;
  description?: string | undefined;
  audits?: string | undefined;
  category?: string | undefined;
  twitter?: string | undefined;
  auditLinks?: Array<string> | undefined;
  forkedFrom?: Array<string> | undefined;
  geckoId?: string | undefined;
  chains?: Array<string> | undefined;
  module?: string | undefined;
  protocolType?: string | undefined;
  methodology?: string | undefined;
  latestFetchIsOk?: boolean | undefined;
  slug?: string | undefined;
  tvl?: number | undefined;
  chainTvls?: { [k: string]: number } | undefined;
  change1h?: number | undefined;
  change1d?: number | undefined;
  change7d?: number | undefined;
  fdv?: number | undefined;
  mcap?: number | undefined;
  total24h?: number | undefined;
  total48hto24h?: number | undefined;
  total7d?: number | undefined;
  total14dto7d?: number | undefined;
  total60dto30d?: number | undefined;
  total30d?: number | undefined;
  totalAllTime?: number | undefined;
  breakdown24h?: { [k: string]: { [k: string]: number } } | undefined;
};

/** @internal */
export const DexProtocolSummary$inboundSchema: z.ZodType<
  DexProtocolSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  displayName: z.string().optional(),
  disabled: z.boolean().optional(),
  logo: z.string().optional(),
  address: z.string().optional(),
  url: z.string().optional(),
  description: z.string().optional(),
  audits: z.string().optional(),
  category: z.string().optional(),
  twitter: z.string().optional(),
  audit_links: z.array(z.string()).optional(),
  forkedFrom: z.array(z.string()).optional(),
  gecko_id: z.string().optional(),
  chains: z.array(z.string()).optional(),
  module: z.string().optional(),
  protocolType: z.string().optional(),
  methodology: z.string().optional(),
  latestFetchIsOk: z.boolean().optional(),
  slug: z.string().optional(),
  tvl: z.number().optional(),
  chainTvls: z.record(z.number()).optional(),
  change_1h: z.number().optional(),
  change_1d: z.number().optional(),
  change_7d: z.number().optional(),
  fdv: z.number().optional(),
  mcap: z.number().optional(),
  total24h: z.number().optional(),
  total48hto24h: z.number().optional(),
  total7d: z.number().optional(),
  total14dto7d: z.number().optional(),
  total60dto30d: z.number().optional(),
  total30d: z.number().optional(),
  totalAllTime: z.number().optional(),
  breakdown24h: z.record(z.record(z.number())).optional(),
}).transform((v) => {
  return remap$(v, {
    "audit_links": "auditLinks",
    "gecko_id": "geckoId",
    "change_1h": "change1h",
    "change_1d": "change1d",
    "change_7d": "change7d",
  });
});

/** @internal */
export type DexProtocolSummary$Outbound = {
  name?: string | undefined;
  displayName?: string | undefined;
  disabled?: boolean | undefined;
  logo?: string | undefined;
  address?: string | undefined;
  url?: string | undefined;
  description?: string | undefined;
  audits?: string | undefined;
  category?: string | undefined;
  twitter?: string | undefined;
  audit_links?: Array<string> | undefined;
  forkedFrom?: Array<string> | undefined;
  gecko_id?: string | undefined;
  chains?: Array<string> | undefined;
  module?: string | undefined;
  protocolType?: string | undefined;
  methodology?: string | undefined;
  latestFetchIsOk?: boolean | undefined;
  slug?: string | undefined;
  tvl?: number | undefined;
  chainTvls?: { [k: string]: number } | undefined;
  change_1h?: number | undefined;
  change_1d?: number | undefined;
  change_7d?: number | undefined;
  fdv?: number | undefined;
  mcap?: number | undefined;
  total24h?: number | undefined;
  total48hto24h?: number | undefined;
  total7d?: number | undefined;
  total14dto7d?: number | undefined;
  total60dto30d?: number | undefined;
  total30d?: number | undefined;
  totalAllTime?: number | undefined;
  breakdown24h?: { [k: string]: { [k: string]: number } } | undefined;
};

/** @internal */
export const DexProtocolSummary$outboundSchema: z.ZodType<
  DexProtocolSummary$Outbound,
  z.ZodTypeDef,
  DexProtocolSummary
> = z.object({
  name: z.string().optional(),
  displayName: z.string().optional(),
  disabled: z.boolean().optional(),
  logo: z.string().optional(),
  address: z.string().optional(),
  url: z.string().optional(),
  description: z.string().optional(),
  audits: z.string().optional(),
  category: z.string().optional(),
  twitter: z.string().optional(),
  auditLinks: z.array(z.string()).optional(),
  forkedFrom: z.array(z.string()).optional(),
  geckoId: z.string().optional(),
  chains: z.array(z.string()).optional(),
  module: z.string().optional(),
  protocolType: z.string().optional(),
  methodology: z.string().optional(),
  latestFetchIsOk: z.boolean().optional(),
  slug: z.string().optional(),
  tvl: z.number().optional(),
  chainTvls: z.record(z.number()).optional(),
  change1h: z.number().optional(),
  change1d: z.number().optional(),
  change7d: z.number().optional(),
  fdv: z.number().optional(),
  mcap: z.number().optional(),
  total24h: z.number().optional(),
  total48hto24h: z.number().optional(),
  total7d: z.number().optional(),
  total14dto7d: z.number().optional(),
  total60dto30d: z.number().optional(),
  total30d: z.number().optional(),
  totalAllTime: z.number().optional(),
  breakdown24h: z.record(z.record(z.number())).optional(),
}).transform((v) => {
  return remap$(v, {
    auditLinks: "audit_links",
    geckoId: "gecko_id",
    change1h: "change_1h",
    change1d: "change_1d",
    change7d: "change_7d",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DexProtocolSummary$ {
  /** @deprecated use `DexProtocolSummary$inboundSchema` instead. */
  export const inboundSchema = DexProtocolSummary$inboundSchema;
  /** @deprecated use `DexProtocolSummary$outboundSchema` instead. */
  export const outboundSchema = DexProtocolSummary$outboundSchema;
  /** @deprecated use `DexProtocolSummary$Outbound` instead. */
  export type Outbound = DexProtocolSummary$Outbound;
}

export function dexProtocolSummaryToJSON(
  dexProtocolSummary: DexProtocolSummary,
): string {
  return JSON.stringify(
    DexProtocolSummary$outboundSchema.parse(dexProtocolSummary),
  );
}

export function dexProtocolSummaryFromJSON(
  jsonString: string,
): SafeParseResult<DexProtocolSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DexProtocolSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DexProtocolSummary' from JSON`,
  );
}
