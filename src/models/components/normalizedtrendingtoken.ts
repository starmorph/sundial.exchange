/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PriceHistoryPoint,
  PriceHistoryPoint$inboundSchema,
  PriceHistoryPoint$Outbound,
  PriceHistoryPoint$outboundSchema,
} from "./pricehistorypoint.js";

export type NormalizedTrendingToken = {
  symbol: string;
  currentPrice: number;
  change24h: number;
  prices: Array<PriceHistoryPoint>;
};

/** @internal */
export const NormalizedTrendingToken$inboundSchema: z.ZodType<
  NormalizedTrendingToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  symbol: z.string(),
  currentPrice: z.number(),
  change24h: z.number(),
  prices: z.array(PriceHistoryPoint$inboundSchema),
});

/** @internal */
export type NormalizedTrendingToken$Outbound = {
  symbol: string;
  currentPrice: number;
  change24h: number;
  prices: Array<PriceHistoryPoint$Outbound>;
};

/** @internal */
export const NormalizedTrendingToken$outboundSchema: z.ZodType<
  NormalizedTrendingToken$Outbound,
  z.ZodTypeDef,
  NormalizedTrendingToken
> = z.object({
  symbol: z.string(),
  currentPrice: z.number(),
  change24h: z.number(),
  prices: z.array(PriceHistoryPoint$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NormalizedTrendingToken$ {
  /** @deprecated use `NormalizedTrendingToken$inboundSchema` instead. */
  export const inboundSchema = NormalizedTrendingToken$inboundSchema;
  /** @deprecated use `NormalizedTrendingToken$outboundSchema` instead. */
  export const outboundSchema = NormalizedTrendingToken$outboundSchema;
  /** @deprecated use `NormalizedTrendingToken$Outbound` instead. */
  export type Outbound = NormalizedTrendingToken$Outbound;
}

export function normalizedTrendingTokenToJSON(
  normalizedTrendingToken: NormalizedTrendingToken,
): string {
  return JSON.stringify(
    NormalizedTrendingToken$outboundSchema.parse(normalizedTrendingToken),
  );
}

export function normalizedTrendingTokenFromJSON(
  jsonString: string,
): SafeParseResult<NormalizedTrendingToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NormalizedTrendingToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NormalizedTrendingToken' from JSON`,
  );
}
