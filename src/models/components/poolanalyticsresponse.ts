/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PoolAnalyticsMetrics,
  PoolAnalyticsMetrics$inboundSchema,
  PoolAnalyticsMetrics$Outbound,
  PoolAnalyticsMetrics$outboundSchema,
} from "./poolanalyticsmetrics.js";
import {
  PoolReservesSnapshot,
  PoolReservesSnapshot$inboundSchema,
  PoolReservesSnapshot$Outbound,
  PoolReservesSnapshot$outboundSchema,
} from "./poolreservessnapshot.js";

export type PoolAnalyticsResponse = {
  poolId: string;
  poolName: string;
  metrics: PoolAnalyticsMetrics;
  reserves: PoolReservesSnapshot;
  priceImpactBps: number | null;
  updatedAtUnix: number;
  fetchedAt: Date;
  /**
   * Raw upstream payload from Jupiter Ultra.
   */
  raw?: { [k: string]: any } | undefined;
};

/** @internal */
export const PoolAnalyticsResponse$inboundSchema: z.ZodType<
  PoolAnalyticsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  poolId: z.string(),
  poolName: z.string(),
  metrics: PoolAnalyticsMetrics$inboundSchema,
  reserves: PoolReservesSnapshot$inboundSchema,
  priceImpactBps: z.nullable(z.number()),
  updatedAtUnix: z.number(),
  fetchedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  raw: z.record(z.any()).optional(),
});

/** @internal */
export type PoolAnalyticsResponse$Outbound = {
  poolId: string;
  poolName: string;
  metrics: PoolAnalyticsMetrics$Outbound;
  reserves: PoolReservesSnapshot$Outbound;
  priceImpactBps: number | null;
  updatedAtUnix: number;
  fetchedAt: string;
  raw?: { [k: string]: any } | undefined;
};

/** @internal */
export const PoolAnalyticsResponse$outboundSchema: z.ZodType<
  PoolAnalyticsResponse$Outbound,
  z.ZodTypeDef,
  PoolAnalyticsResponse
> = z.object({
  poolId: z.string(),
  poolName: z.string(),
  metrics: PoolAnalyticsMetrics$outboundSchema,
  reserves: PoolReservesSnapshot$outboundSchema,
  priceImpactBps: z.nullable(z.number()),
  updatedAtUnix: z.number(),
  fetchedAt: z.date().transform(v => v.toISOString()),
  raw: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PoolAnalyticsResponse$ {
  /** @deprecated use `PoolAnalyticsResponse$inboundSchema` instead. */
  export const inboundSchema = PoolAnalyticsResponse$inboundSchema;
  /** @deprecated use `PoolAnalyticsResponse$outboundSchema` instead. */
  export const outboundSchema = PoolAnalyticsResponse$outboundSchema;
  /** @deprecated use `PoolAnalyticsResponse$Outbound` instead. */
  export type Outbound = PoolAnalyticsResponse$Outbound;
}

export function poolAnalyticsResponseToJSON(
  poolAnalyticsResponse: PoolAnalyticsResponse,
): string {
  return JSON.stringify(
    PoolAnalyticsResponse$outboundSchema.parse(poolAnalyticsResponse),
  );
}

export function poolAnalyticsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PoolAnalyticsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PoolAnalyticsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PoolAnalyticsResponse' from JSON`,
  );
}
