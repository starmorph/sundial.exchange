/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PoolReservesSnapshot = {
  baseSymbol?: string | undefined;
  quoteSymbol?: string | undefined;
  baseMint?: string | null | undefined;
  quoteMint?: string | null | undefined;
  baseAmount?: number | undefined;
  quoteAmount?: number | undefined;
};

/** @internal */
export const PoolReservesSnapshot$inboundSchema: z.ZodType<
  PoolReservesSnapshot,
  z.ZodTypeDef,
  unknown
> = z.object({
  baseSymbol: z.string().optional(),
  quoteSymbol: z.string().optional(),
  baseMint: z.nullable(z.string()).optional(),
  quoteMint: z.nullable(z.string()).optional(),
  baseAmount: z.number().optional(),
  quoteAmount: z.number().optional(),
});

/** @internal */
export type PoolReservesSnapshot$Outbound = {
  baseSymbol?: string | undefined;
  quoteSymbol?: string | undefined;
  baseMint?: string | null | undefined;
  quoteMint?: string | null | undefined;
  baseAmount?: number | undefined;
  quoteAmount?: number | undefined;
};

/** @internal */
export const PoolReservesSnapshot$outboundSchema: z.ZodType<
  PoolReservesSnapshot$Outbound,
  z.ZodTypeDef,
  PoolReservesSnapshot
> = z.object({
  baseSymbol: z.string().optional(),
  quoteSymbol: z.string().optional(),
  baseMint: z.nullable(z.string()).optional(),
  quoteMint: z.nullable(z.string()).optional(),
  baseAmount: z.number().optional(),
  quoteAmount: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PoolReservesSnapshot$ {
  /** @deprecated use `PoolReservesSnapshot$inboundSchema` instead. */
  export const inboundSchema = PoolReservesSnapshot$inboundSchema;
  /** @deprecated use `PoolReservesSnapshot$outboundSchema` instead. */
  export const outboundSchema = PoolReservesSnapshot$outboundSchema;
  /** @deprecated use `PoolReservesSnapshot$Outbound` instead. */
  export type Outbound = PoolReservesSnapshot$Outbound;
}

export function poolReservesSnapshotToJSON(
  poolReservesSnapshot: PoolReservesSnapshot,
): string {
  return JSON.stringify(
    PoolReservesSnapshot$outboundSchema.parse(poolReservesSnapshot),
  );
}

export function poolReservesSnapshotFromJSON(
  jsonString: string,
): SafeParseResult<PoolReservesSnapshot, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PoolReservesSnapshot$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PoolReservesSnapshot' from JSON`,
  );
}
