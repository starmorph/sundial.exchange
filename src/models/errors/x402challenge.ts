/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";
import { SundialExchangeAPIError } from "./sundialexchangeapierror.js";

/**
 * Version of x402 protocol
 */
export const X402Version = {
  One: 1,
} as const;
/**
 * Version of x402 protocol
 */
export type X402Version = ClosedEnum<typeof X402Version>;

/**
 * x402 payment challenge containing payment requirements.
 *
 * @remarks
 * The challenge includes options for both Base and Solana networks.
 * Clients can choose which network to use for payment.
 */
export type X402ChallengeData = {
  /**
   * Version of x402 protocol
   */
  x402Version: X402Version;
  /**
   * Error message indicating payment is required
   */
  error: string;
  /**
   * Array of accepted payment methods (Base and Solana)
   */
  accepts: Array<components.X402PaymentMethod>;
};

/**
 * x402 payment challenge containing payment requirements.
 *
 * @remarks
 * The challenge includes options for both Base and Solana networks.
 * Clients can choose which network to use for payment.
 */
export class X402Challenge extends SundialExchangeAPIError {
  /**
   * Version of x402 protocol
   */
  x402Version: X402Version;
  /**
   * Error message indicating payment is required
   */
  error: string;
  /**
   * Array of accepted payment methods (Base and Solana)
   */
  accepts: Array<components.X402PaymentMethod>;

  /** The original data that was passed to this error instance. */
  data$: X402ChallengeData;

  constructor(
    err: X402ChallengeData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.x402Version = err.x402Version;
    this.error = err.error;
    this.accepts = err.accepts;

    this.name = "X402Challenge";
  }
}

/** @internal */
export const X402Version$inboundSchema: z.ZodNativeEnum<typeof X402Version> = z
  .nativeEnum(X402Version);

/** @internal */
export const X402Version$outboundSchema: z.ZodNativeEnum<typeof X402Version> =
  X402Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace X402Version$ {
  /** @deprecated use `X402Version$inboundSchema` instead. */
  export const inboundSchema = X402Version$inboundSchema;
  /** @deprecated use `X402Version$outboundSchema` instead. */
  export const outboundSchema = X402Version$outboundSchema;
}

/** @internal */
export const X402Challenge$inboundSchema: z.ZodType<
  X402Challenge,
  z.ZodTypeDef,
  unknown
> = z.object({
  x402Version: X402Version$inboundSchema,
  error: z.string(),
  accepts: z.array(components.X402PaymentMethod$inboundSchema),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new X402Challenge(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type X402Challenge$Outbound = {
  x402Version: number;
  error: string;
  accepts: Array<components.X402PaymentMethod$Outbound>;
};

/** @internal */
export const X402Challenge$outboundSchema: z.ZodType<
  X402Challenge$Outbound,
  z.ZodTypeDef,
  X402Challenge
> = z.instanceof(X402Challenge)
  .transform(v => v.data$)
  .pipe(z.object({
    x402Version: X402Version$outboundSchema,
    error: z.string(),
    accepts: z.array(components.X402PaymentMethod$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace X402Challenge$ {
  /** @deprecated use `X402Challenge$inboundSchema` instead. */
  export const inboundSchema = X402Challenge$inboundSchema;
  /** @deprecated use `X402Challenge$outboundSchema` instead. */
  export const outboundSchema = X402Challenge$outboundSchema;
  /** @deprecated use `X402Challenge$Outbound` instead. */
  export type Outbound = X402Challenge$Outbound;
}
