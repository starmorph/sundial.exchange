/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Overview data
 */
export type GetDexOverviewResponseBody = {
  protocols: Array<components.DexProtocolSummary>;
  volumes: Array<components.DexVolumeData>;
};

export type GetDexOverviewResponse = {
  headers: { [k: string]: Array<string> };
  result: GetDexOverviewResponseBody;
};

/** @internal */
export const GetDexOverviewResponseBody$inboundSchema: z.ZodType<
  GetDexOverviewResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  protocols: z.array(components.DexProtocolSummary$inboundSchema),
  volumes: z.array(components.DexVolumeData$inboundSchema),
});

/** @internal */
export type GetDexOverviewResponseBody$Outbound = {
  protocols: Array<components.DexProtocolSummary$Outbound>;
  volumes: Array<components.DexVolumeData$Outbound>;
};

/** @internal */
export const GetDexOverviewResponseBody$outboundSchema: z.ZodType<
  GetDexOverviewResponseBody$Outbound,
  z.ZodTypeDef,
  GetDexOverviewResponseBody
> = z.object({
  protocols: z.array(components.DexProtocolSummary$outboundSchema),
  volumes: z.array(components.DexVolumeData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDexOverviewResponseBody$ {
  /** @deprecated use `GetDexOverviewResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetDexOverviewResponseBody$inboundSchema;
  /** @deprecated use `GetDexOverviewResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetDexOverviewResponseBody$outboundSchema;
  /** @deprecated use `GetDexOverviewResponseBody$Outbound` instead. */
  export type Outbound = GetDexOverviewResponseBody$Outbound;
}

export function getDexOverviewResponseBodyToJSON(
  getDexOverviewResponseBody: GetDexOverviewResponseBody,
): string {
  return JSON.stringify(
    GetDexOverviewResponseBody$outboundSchema.parse(getDexOverviewResponseBody),
  );
}

export function getDexOverviewResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetDexOverviewResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDexOverviewResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDexOverviewResponseBody' from JSON`,
  );
}

/** @internal */
export const GetDexOverviewResponse$inboundSchema: z.ZodType<
  GetDexOverviewResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetDexOverviewResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetDexOverviewResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetDexOverviewResponseBody$Outbound;
};

/** @internal */
export const GetDexOverviewResponse$outboundSchema: z.ZodType<
  GetDexOverviewResponse$Outbound,
  z.ZodTypeDef,
  GetDexOverviewResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => GetDexOverviewResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDexOverviewResponse$ {
  /** @deprecated use `GetDexOverviewResponse$inboundSchema` instead. */
  export const inboundSchema = GetDexOverviewResponse$inboundSchema;
  /** @deprecated use `GetDexOverviewResponse$outboundSchema` instead. */
  export const outboundSchema = GetDexOverviewResponse$outboundSchema;
  /** @deprecated use `GetDexOverviewResponse$Outbound` instead. */
  export type Outbound = GetDexOverviewResponse$Outbound;
}

export function getDexOverviewResponseToJSON(
  getDexOverviewResponse: GetDexOverviewResponse,
): string {
  return JSON.stringify(
    GetDexOverviewResponse$outboundSchema.parse(getDexOverviewResponse),
  );
}

export function getDexOverviewResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDexOverviewResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDexOverviewResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDexOverviewResponse' from JSON`,
  );
}
