/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDexProtocolBySlugRequest = {
  /**
   * Protocol slug (e.g. "raydium")
   */
  slug: string;
};

export type GetDexProtocolBySlugResponse = {
  headers: { [k: string]: Array<string> };
  result: components.DexProtocolSummary;
};

/** @internal */
export const GetDexProtocolBySlugRequest$inboundSchema: z.ZodType<
  GetDexProtocolBySlugRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
});

/** @internal */
export type GetDexProtocolBySlugRequest$Outbound = {
  slug: string;
};

/** @internal */
export const GetDexProtocolBySlugRequest$outboundSchema: z.ZodType<
  GetDexProtocolBySlugRequest$Outbound,
  z.ZodTypeDef,
  GetDexProtocolBySlugRequest
> = z.object({
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDexProtocolBySlugRequest$ {
  /** @deprecated use `GetDexProtocolBySlugRequest$inboundSchema` instead. */
  export const inboundSchema = GetDexProtocolBySlugRequest$inboundSchema;
  /** @deprecated use `GetDexProtocolBySlugRequest$outboundSchema` instead. */
  export const outboundSchema = GetDexProtocolBySlugRequest$outboundSchema;
  /** @deprecated use `GetDexProtocolBySlugRequest$Outbound` instead. */
  export type Outbound = GetDexProtocolBySlugRequest$Outbound;
}

export function getDexProtocolBySlugRequestToJSON(
  getDexProtocolBySlugRequest: GetDexProtocolBySlugRequest,
): string {
  return JSON.stringify(
    GetDexProtocolBySlugRequest$outboundSchema.parse(
      getDexProtocolBySlugRequest,
    ),
  );
}

export function getDexProtocolBySlugRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDexProtocolBySlugRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDexProtocolBySlugRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDexProtocolBySlugRequest' from JSON`,
  );
}

/** @internal */
export const GetDexProtocolBySlugResponse$inboundSchema: z.ZodType<
  GetDexProtocolBySlugResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.DexProtocolSummary$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetDexProtocolBySlugResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.DexProtocolSummary$Outbound;
};

/** @internal */
export const GetDexProtocolBySlugResponse$outboundSchema: z.ZodType<
  GetDexProtocolBySlugResponse$Outbound,
  z.ZodTypeDef,
  GetDexProtocolBySlugResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.DexProtocolSummary$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDexProtocolBySlugResponse$ {
  /** @deprecated use `GetDexProtocolBySlugResponse$inboundSchema` instead. */
  export const inboundSchema = GetDexProtocolBySlugResponse$inboundSchema;
  /** @deprecated use `GetDexProtocolBySlugResponse$outboundSchema` instead. */
  export const outboundSchema = GetDexProtocolBySlugResponse$outboundSchema;
  /** @deprecated use `GetDexProtocolBySlugResponse$Outbound` instead. */
  export type Outbound = GetDexProtocolBySlugResponse$Outbound;
}

export function getDexProtocolBySlugResponseToJSON(
  getDexProtocolBySlugResponse: GetDexProtocolBySlugResponse,
): string {
  return JSON.stringify(
    GetDexProtocolBySlugResponse$outboundSchema.parse(
      getDexProtocolBySlugResponse,
    ),
  );
}

export function getDexProtocolBySlugResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDexProtocolBySlugResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDexProtocolBySlugResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDexProtocolBySlugResponse' from JSON`,
  );
}
