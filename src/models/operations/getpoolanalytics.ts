/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPoolAnalyticsRequest = {
  /**
   * Solana pool address (base58)
   */
  poolId: string;
};

export type GetPoolAnalyticsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.PoolAnalyticsResponse;
};

/** @internal */
export const GetPoolAnalyticsRequest$inboundSchema: z.ZodType<
  GetPoolAnalyticsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  poolId: z.string(),
});

/** @internal */
export type GetPoolAnalyticsRequest$Outbound = {
  poolId: string;
};

/** @internal */
export const GetPoolAnalyticsRequest$outboundSchema: z.ZodType<
  GetPoolAnalyticsRequest$Outbound,
  z.ZodTypeDef,
  GetPoolAnalyticsRequest
> = z.object({
  poolId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPoolAnalyticsRequest$ {
  /** @deprecated use `GetPoolAnalyticsRequest$inboundSchema` instead. */
  export const inboundSchema = GetPoolAnalyticsRequest$inboundSchema;
  /** @deprecated use `GetPoolAnalyticsRequest$outboundSchema` instead. */
  export const outboundSchema = GetPoolAnalyticsRequest$outboundSchema;
  /** @deprecated use `GetPoolAnalyticsRequest$Outbound` instead. */
  export type Outbound = GetPoolAnalyticsRequest$Outbound;
}

export function getPoolAnalyticsRequestToJSON(
  getPoolAnalyticsRequest: GetPoolAnalyticsRequest,
): string {
  return JSON.stringify(
    GetPoolAnalyticsRequest$outboundSchema.parse(getPoolAnalyticsRequest),
  );
}

export function getPoolAnalyticsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPoolAnalyticsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPoolAnalyticsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPoolAnalyticsRequest' from JSON`,
  );
}

/** @internal */
export const GetPoolAnalyticsResponse$inboundSchema: z.ZodType<
  GetPoolAnalyticsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.PoolAnalyticsResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetPoolAnalyticsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.PoolAnalyticsResponse$Outbound;
};

/** @internal */
export const GetPoolAnalyticsResponse$outboundSchema: z.ZodType<
  GetPoolAnalyticsResponse$Outbound,
  z.ZodTypeDef,
  GetPoolAnalyticsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.PoolAnalyticsResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPoolAnalyticsResponse$ {
  /** @deprecated use `GetPoolAnalyticsResponse$inboundSchema` instead. */
  export const inboundSchema = GetPoolAnalyticsResponse$inboundSchema;
  /** @deprecated use `GetPoolAnalyticsResponse$outboundSchema` instead. */
  export const outboundSchema = GetPoolAnalyticsResponse$outboundSchema;
  /** @deprecated use `GetPoolAnalyticsResponse$Outbound` instead. */
  export type Outbound = GetPoolAnalyticsResponse$Outbound;
}

export function getPoolAnalyticsResponseToJSON(
  getPoolAnalyticsResponse: GetPoolAnalyticsResponse,
): string {
  return JSON.stringify(
    GetPoolAnalyticsResponse$outboundSchema.parse(getPoolAnalyticsResponse),
  );
}

export function getPoolAnalyticsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPoolAnalyticsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPoolAnalyticsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPoolAnalyticsResponse' from JSON`,
  );
}
