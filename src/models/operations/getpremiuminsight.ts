/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Premium AI forecast payload
 */
export type GetPremiumInsightResponseBody = {
  /**
   * AI-authored summary of near-term Solana market expectations
   */
  forecast: string;
  /**
   * UTC timestamp when the forecast was generated
   */
  generatedAt: Date;
};

export type GetPremiumInsightResponse = {
  headers: { [k: string]: Array<string> };
  result: GetPremiumInsightResponseBody;
};

/** @internal */
export const GetPremiumInsightResponseBody$inboundSchema: z.ZodType<
  GetPremiumInsightResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  forecast: z.string(),
  generatedAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
});

/** @internal */
export type GetPremiumInsightResponseBody$Outbound = {
  forecast: string;
  generatedAt: string;
};

/** @internal */
export const GetPremiumInsightResponseBody$outboundSchema: z.ZodType<
  GetPremiumInsightResponseBody$Outbound,
  z.ZodTypeDef,
  GetPremiumInsightResponseBody
> = z.object({
  forecast: z.string(),
  generatedAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPremiumInsightResponseBody$ {
  /** @deprecated use `GetPremiumInsightResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetPremiumInsightResponseBody$inboundSchema;
  /** @deprecated use `GetPremiumInsightResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetPremiumInsightResponseBody$outboundSchema;
  /** @deprecated use `GetPremiumInsightResponseBody$Outbound` instead. */
  export type Outbound = GetPremiumInsightResponseBody$Outbound;
}

export function getPremiumInsightResponseBodyToJSON(
  getPremiumInsightResponseBody: GetPremiumInsightResponseBody,
): string {
  return JSON.stringify(
    GetPremiumInsightResponseBody$outboundSchema.parse(
      getPremiumInsightResponseBody,
    ),
  );
}

export function getPremiumInsightResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetPremiumInsightResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPremiumInsightResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPremiumInsightResponseBody' from JSON`,
  );
}

/** @internal */
export const GetPremiumInsightResponse$inboundSchema: z.ZodType<
  GetPremiumInsightResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetPremiumInsightResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetPremiumInsightResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetPremiumInsightResponseBody$Outbound;
};

/** @internal */
export const GetPremiumInsightResponse$outboundSchema: z.ZodType<
  GetPremiumInsightResponse$Outbound,
  z.ZodTypeDef,
  GetPremiumInsightResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => GetPremiumInsightResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPremiumInsightResponse$ {
  /** @deprecated use `GetPremiumInsightResponse$inboundSchema` instead. */
  export const inboundSchema = GetPremiumInsightResponse$inboundSchema;
  /** @deprecated use `GetPremiumInsightResponse$outboundSchema` instead. */
  export const outboundSchema = GetPremiumInsightResponse$outboundSchema;
  /** @deprecated use `GetPremiumInsightResponse$Outbound` instead. */
  export type Outbound = GetPremiumInsightResponse$Outbound;
}

export function getPremiumInsightResponseToJSON(
  getPremiumInsightResponse: GetPremiumInsightResponse,
): string {
  return JSON.stringify(
    GetPremiumInsightResponse$outboundSchema.parse(getPremiumInsightResponse),
  );
}

export function getPremiumInsightResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPremiumInsightResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPremiumInsightResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPremiumInsightResponse' from JSON`,
  );
}
