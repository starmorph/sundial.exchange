/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTrendingTokensRequest = {
  /**
   * Lookback window in hours (> 0). Defaults to 24.
   */
  hours?: number | undefined;
};

export type GetTrendingTokensResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.NormalizedTrendingToken>;
};

/** @internal */
export const GetTrendingTokensRequest$inboundSchema: z.ZodType<
  GetTrendingTokensRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  hours: z.number().int().default(24),
});

/** @internal */
export type GetTrendingTokensRequest$Outbound = {
  hours: number;
};

/** @internal */
export const GetTrendingTokensRequest$outboundSchema: z.ZodType<
  GetTrendingTokensRequest$Outbound,
  z.ZodTypeDef,
  GetTrendingTokensRequest
> = z.object({
  hours: z.number().int().default(24),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTrendingTokensRequest$ {
  /** @deprecated use `GetTrendingTokensRequest$inboundSchema` instead. */
  export const inboundSchema = GetTrendingTokensRequest$inboundSchema;
  /** @deprecated use `GetTrendingTokensRequest$outboundSchema` instead. */
  export const outboundSchema = GetTrendingTokensRequest$outboundSchema;
  /** @deprecated use `GetTrendingTokensRequest$Outbound` instead. */
  export type Outbound = GetTrendingTokensRequest$Outbound;
}

export function getTrendingTokensRequestToJSON(
  getTrendingTokensRequest: GetTrendingTokensRequest,
): string {
  return JSON.stringify(
    GetTrendingTokensRequest$outboundSchema.parse(getTrendingTokensRequest),
  );
}

export function getTrendingTokensRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTrendingTokensRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTrendingTokensRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTrendingTokensRequest' from JSON`,
  );
}

/** @internal */
export const GetTrendingTokensResponse$inboundSchema: z.ZodType<
  GetTrendingTokensResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.NormalizedTrendingToken$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetTrendingTokensResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.NormalizedTrendingToken$Outbound>;
};

/** @internal */
export const GetTrendingTokensResponse$outboundSchema: z.ZodType<
  GetTrendingTokensResponse$Outbound,
  z.ZodTypeDef,
  GetTrendingTokensResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.NormalizedTrendingToken$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTrendingTokensResponse$ {
  /** @deprecated use `GetTrendingTokensResponse$inboundSchema` instead. */
  export const inboundSchema = GetTrendingTokensResponse$inboundSchema;
  /** @deprecated use `GetTrendingTokensResponse$outboundSchema` instead. */
  export const outboundSchema = GetTrendingTokensResponse$outboundSchema;
  /** @deprecated use `GetTrendingTokensResponse$Outbound` instead. */
  export type Outbound = GetTrendingTokensResponse$Outbound;
}

export function getTrendingTokensResponseToJSON(
  getTrendingTokensResponse: GetTrendingTokensResponse,
): string {
  return JSON.stringify(
    GetTrendingTokensResponse$outboundSchema.parse(getTrendingTokensResponse),
  );
}

export function getTrendingTokensResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTrendingTokensResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTrendingTokensResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTrendingTokensResponse' from JSON`,
  );
}
