{"version":3,"sources":["../src/referral.ts","../src/chunks.ts","../src/constant.ts","../src/FeeService.ts","../src/idl.ts","../src/utils.ts","../src/filter.ts"],"sourcesContent":["import { AnchorProvider, IdlAccounts, Program } from \"@coral-xyz/anchor\";\nimport {\n  AccountLayout,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createAssociatedTokenAccountIdempotentInstruction,\n  getAssociatedTokenAddressSync,\n  RawAccount,\n  TOKEN_2022_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  ComputeBudgetProgram,\n  Connection,\n  GetProgramAccountsFilter,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n  TransactionMessage,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport chunk from \"lodash/chunk\";\n\nimport { chunkedGetMultipleAccountInfos } from \"./chunks\";\nimport { PROGRAM_ID } from \"./constant\";\nimport { feeService } from \"./FeeService\";\nimport { IDL, Referral } from \"./idl\";\nimport { getOrCreateATAInstruction } from \"./utils\";\n\nexport interface InitializeProjectVariable {\n  adminPubKey: PublicKey;\n  basePubKey: PublicKey;\n  name: string;\n  defaultShareBps: number;\n}\n\nexport interface TransferProjectVariable {\n  newAdminPubKey: PublicKey;\n  projectPubKey: PublicKey;\n}\n\nexport interface InitializeReferralAccountVariable {\n  projectPubKey: PublicKey;\n  partnerPubKey: PublicKey;\n  payerPubKey: PublicKey;\n  referralAccountPubKey: PublicKey;\n}\n\nexport interface InitializeReferralAccountWithNameVariable {\n  projectPubKey: PublicKey;\n  partnerPubKey: PublicKey;\n  payerPubKey: PublicKey;\n  name: string;\n}\n\nexport interface TransferReferralAccountVariable {\n  newPartnerPubKey: PublicKey;\n  referralAccountPubKey: PublicKey;\n}\n\nexport interface GetReferralAccountPubkeyVariable {\n  projectPubKey: PublicKey;\n  name: string;\n}\n\nexport interface GetReferralTokenAccountPubkeyVariable {\n  referralAccountPubKey: PublicKey;\n  mint: PublicKey;\n}\n\nexport interface InitializeReferralTokenAccountVariable {\n  payerPubKey: PublicKey;\n  referralAccountPubKey: PublicKey;\n  mint: PublicKey;\n}\n\nexport interface ClaimVariable {\n  payerPubKey: PublicKey;\n  referralAccountPubKey: PublicKey;\n  mint: PublicKey;\n}\n\nexport interface ClaimAllVariable {\n  payerPubKey: PublicKey;\n  referralAccountPubKey: PublicKey;\n  strategy?: GetReferralTokenAccountsStrategy;\n}\n\nexport interface ClaimPartiallyVariable extends ClaimAllVariable {\n  withdrawalableTokenAddress: PublicKey[];\n}\n\nexport interface RawAccountWithPubkey {\n  pubkey: PublicKey;\n  account: RawAccount;\n}\n\nexport const useReferral = (connection: Connection) => {\n  return new ReferralProvider(connection);\n};\n\nexport type GetReferralTokenAccountsStrategy =\n  | { type: \"top-tokens\"; topN: number }\n  | { type: \"token-list\" };\n\nexport class ReferralProvider {\n  private program: Program<Referral>;\n  private connection: Connection;\n\n  constructor(connection: Connection) {\n    this.connection = connection;\n\n    const provider = new AnchorProvider(\n      connection,\n      {} as any,\n      AnchorProvider.defaultOptions(),\n    );\n\n    this.program = new Program(IDL, PROGRAM_ID, provider);\n  }\n\n  public async getProjects(filters: GetProgramAccountsFilter[] = []) {\n    return await this.program.account.project.all(filters);\n  }\n\n  public async getProject(pubkey: PublicKey) {\n    return await this.program.account.project.fetch(pubkey);\n  }\n\n  public async getReferralAccount(pubkey: PublicKey) {\n    return await this.program.account.referralAccount.fetch(pubkey);\n  }\n\n  public async getReferralAccounts(filters: GetProgramAccountsFilter[] = []) {\n    return await this.program.account.referralAccount.all(filters);\n  }\n\n  public getProjectAuthorityPubKey(\n    project: IdlAccounts<Referral>[\"project\"],\n  ): PublicKey {\n    let [projectAuthority] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"project_authority\"), project.base.toBuffer()],\n      this.program.programId,\n    );\n\n    return projectAuthority;\n  }\n\n  public getReferralAccountWithNamePubKey({\n    projectPubKey,\n    name,\n  }: GetReferralAccountPubkeyVariable) {\n    const [referralAccountPubKey] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"referral\"), projectPubKey.toBuffer(), Buffer.from(name)],\n      this.program.programId,\n    );\n\n    return referralAccountPubKey;\n  }\n\n  public getReferralTokenAccountPubKey({\n    referralAccountPubKey,\n    mint,\n  }: GetReferralTokenAccountPubkeyVariable) {\n    const [referralTokenAccountPubKey] = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(\"referral_ata\"),\n        referralAccountPubKey.toBuffer(),\n        mint.toBuffer(),\n      ],\n      this.program.programId,\n    );\n\n    return referralTokenAccountPubKey;\n  }\n\n  public getReferralTokenAccountPubKeyV2({\n    referralAccountPubKey,\n    tokenProgramId,\n    mint,\n  }: GetReferralTokenAccountPubkeyVariable & {\n    tokenProgramId: PublicKey;\n  }) {\n    const tokenAccount = getAssociatedTokenAddressSync(\n      mint,\n      referralAccountPubKey,\n      true,\n      tokenProgramId,\n    );\n\n    return tokenAccount;\n  }\n\n  public async getReferralTokenAccounts(\n    referralAccountAddress: string,\n  ): Promise<{\n    tokenAccounts: RawAccountWithPubkey[];\n    token2022Accounts: RawAccountWithPubkey[];\n  }> {\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      new PublicKey(referralAccountAddress),\n    );\n\n    const [tokenAccounts, token2022Accounts] = await Promise.all(\n      [TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID].map(async (programId) => {\n        const mintSet = new Set();\n        const possibleTokenAccountSet = new Set<string>();\n        const tokenAccountMap = new Map<string, RawAccount>();\n\n        // get all token accounts belong to project\n        const allTokenAccounts = await this.connection.getTokenAccountsByOwner(\n          referralAccount.project,\n          { programId },\n        );\n\n        // get unique mint and all token accounts\n        allTokenAccounts.value.map((tokenAccount) => {\n          const accountData = AccountLayout.decode(\n            new Uint8Array(tokenAccount.account.data),\n          );\n\n          if (!mintSet.has(accountData.mint.toBase58())) {\n            const address = this.getReferralTokenAccountPubKey({\n              referralAccountPubKey: new PublicKey(referralAccountAddress),\n              mint: accountData.mint,\n            });\n            mintSet.add(accountData.mint.toBase58());\n            possibleTokenAccountSet.add(address.toBase58());\n          }\n\n          tokenAccountMap.set(tokenAccount.pubkey.toBase58(), accountData);\n        });\n\n        // loop through mint and find token account belong to referral account\n        return Array.from(possibleTokenAccountSet).reduce((acc, address) => {\n          const tokenAccount = tokenAccountMap.get(address);\n          if (tokenAccount) {\n            acc.push({ pubkey: new PublicKey(address), account: tokenAccount });\n          }\n\n          return acc;\n        }, new Array<RawAccountWithPubkey>());\n      }),\n    );\n\n    return { tokenAccounts, token2022Accounts };\n  }\n\n  public async getReferralTokenAccountsV2(\n    referralAccountAddress: string,\n  ): Promise<{\n    tokenAccounts: RawAccountWithPubkey[];\n    token2022Accounts: RawAccountWithPubkey[];\n  }> {\n    const [tokenAccounts, token2022Accounts] = await Promise.all(\n      [TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID].map(async (programId) => {\n        // get all token accounts owned by referral account for this program\n        const allTokenAccounts = await this.connection.getTokenAccountsByOwner(\n          new PublicKey(referralAccountAddress),\n          { programId },\n        );\n\n        // convert to RawAccountWithPubkey format\n        return allTokenAccounts.value.map((tokenAccount) => ({\n          pubkey: tokenAccount.pubkey,\n          account: AccountLayout.decode(\n            new Uint8Array(tokenAccount.account.data),\n          ),\n        }));\n      }),\n    );\n\n    return { tokenAccounts, token2022Accounts };\n  }\n\n  public async getReferralTokenAccountsWithStrategy(\n    referralAccountAddress: string,\n    strategy: GetReferralTokenAccountsStrategy = {\n      type: \"top-tokens\",\n      topN: 100,\n    },\n  ): Promise<{\n    tokenAccounts: RawAccountWithPubkey[];\n    token2022Accounts: RawAccountWithPubkey[];\n  }> {\n    const tokens = await (async () => {\n      if (strategy.type === \"top-tokens\") {\n        const topTokens = (\n          (await (\n            await fetch(\"https://lite-api.jup.ag/tokens/v2/toptraded/24h\")\n          ).json()) as string[]\n        ).slice(0, strategy.topN);\n        return topTokens;\n      } else if (strategy.type === \"token-list\") {\n        // Fetch verified tokens and LST tokens separately, then combine without duplicates\n        const [verifiedTokens, lstTokens] = await Promise.all([\n          fetch(\"https://lite-api.jup.ag/tokens/v2/tag?query=verified\").then(\n            (res) => res.json(),\n          ),\n          fetch(\"https://lite-api.jup.ag/tokens/v2/tag?query=lst\").then((res) =>\n            res.json(),\n          ),\n        ]);\n\n        // Combine verified and LST tokens, then deduplicate\n        const tokens: string[] = Array.from(\n          new Set([\n            ...verifiedTokens.map(({ id }) => id),\n            ...lstTokens.map(({ id }) => id),\n          ]),\n        );\n\n        return tokens;\n      } else {\n        throw new Error(\"Invalid strategy\");\n      }\n    })();\n\n    const tokensWithOwner = await chunkedGetMultipleAccountInfos(\n      this.connection,\n      tokens.map((topToken) => new PublicKey(topToken)),\n    );\n\n    // Create mint -> owner map\n    const mintOwnerMap = new Map<string, PublicKey>();\n    tokens.forEach((token, index) => {\n      const accountInfo = tokensWithOwner[index];\n      if (accountInfo) {\n        mintOwnerMap.set(token, accountInfo.owner);\n      }\n    });\n\n    const referralTokenAccounts = tokens.map((topToken) =>\n      this.getReferralTokenAccountPubKey({\n        referralAccountPubKey: new PublicKey(referralAccountAddress),\n        mint: new PublicKey(topToken),\n      }),\n    );\n\n    const tokenAccounts: RawAccountWithPubkey[] = [];\n    const token2022Accounts: RawAccountWithPubkey[] = [];\n    const accountInfos = await chunkedGetMultipleAccountInfos(\n      this.connection,\n      referralTokenAccounts,\n    );\n    for (const [index, accountInfo] of accountInfos.entries()) {\n      if (!accountInfo) continue;\n      const address = referralTokenAccounts[index];\n      const rawAccount = AccountLayout.decode(new Uint8Array(accountInfo.data));\n\n      const rawAccountWithPubkey = {\n        pubkey: address,\n        account: rawAccount,\n      };\n      if (accountInfo.owner.equals(TOKEN_PROGRAM_ID)) {\n        tokenAccounts.push(rawAccountWithPubkey);\n      } else if (accountInfo.owner.equals(TOKEN_2022_PROGRAM_ID)) {\n        token2022Accounts.push(rawAccountWithPubkey);\n      }\n    }\n\n    return {\n      tokenAccounts,\n      token2022Accounts,\n    };\n  }\n\n  public async getReferralTokenAccountsWithStrategyV2(\n    referralAccountAddress: string,\n    strategy: GetReferralTokenAccountsStrategy = {\n      type: \"top-tokens\",\n      topN: 100,\n    },\n  ): Promise<{\n    tokenAccounts: RawAccountWithPubkey[];\n    token2022Accounts: RawAccountWithPubkey[];\n  }> {\n    // Get tokens based on strategy\n    const tokens = await (async () => {\n      if (strategy.type === \"top-tokens\") {\n        const topTokens = (\n          (await (\n            await fetch(\"https://lite-api.jup.ag/tokens/v2/toptraded/24h\")\n          ).json()) as string[]\n        ).slice(0, strategy.topN);\n        return topTokens;\n      } else if (strategy.type === \"token-list\") {\n        // Fetch verified tokens and LST tokens separately, then combine without duplicates\n        const [verifiedTokens, lstTokens] = await Promise.all([\n          fetch(\"https://lite-api.jup.ag/tokens/v2/tag?query=verified\").then(\n            (res) => res.json(),\n          ),\n          fetch(\"https://lite-api.jup.ag/tokens/v2/tag?query=lst\").then((res) =>\n            res.json(),\n          ),\n        ]);\n\n        // Combine verified and LST tokens, then deduplicate\n        const tokens: string[] = Array.from(\n          new Set([\n            ...verifiedTokens.map(({ id }) => id),\n            ...lstTokens.map(({ id }) => id),\n          ]),\n        );\n\n        return tokens;\n      } else {\n        throw new Error(\"Invalid strategy\");\n      }\n    })();\n\n    const referralPubkey = new PublicKey(referralAccountAddress);\n\n    // Get token accounts for both programs\n    const [tokenAccounts, token2022Accounts] = await Promise.all(\n      [TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID].map(async (programId) => {\n        const accounts = await this.connection.getTokenAccountsByOwner(\n          referralPubkey,\n          { programId },\n        );\n\n        return accounts.value\n          .map((tokenAccount) => ({\n            pubkey: tokenAccount.pubkey,\n            account: AccountLayout.decode(\n              new Uint8Array(tokenAccount.account.data),\n            ),\n          }))\n          .filter((account) =>\n            // Only include accounts for mints in our strategy list\n            tokens.includes(account.account.mint.toBase58()),\n          );\n      }),\n    );\n\n    return {\n      tokenAccounts,\n      token2022Accounts,\n    };\n  }\n\n  public async initializeProject({\n    basePubKey,\n    adminPubKey,\n    name,\n    defaultShareBps,\n  }: InitializeProjectVariable): Promise<Transaction> {\n    const [projectPubKey] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"project\"), basePubKey.toBuffer()],\n      this.program.programId,\n    );\n\n    return await this.program.methods\n      .initializeProject({ name, defaultShareBps })\n      .accounts({\n        admin: adminPubKey,\n        project: projectPubKey,\n        base: basePubKey,\n      })\n      .transaction();\n  }\n\n  public async transferProject({\n    newAdminPubKey,\n    projectPubKey,\n  }: TransferProjectVariable): Promise<Transaction> {\n    const project = await this.program.account.project.fetch(projectPubKey);\n\n    return await this.program.methods\n      .transferProject({})\n      .accounts({\n        admin: project.admin,\n        project: projectPubKey,\n        newAdmin: newAdminPubKey,\n      })\n      .transaction();\n  }\n\n  public async initializeReferralAccount({\n    projectPubKey,\n    partnerPubKey,\n    payerPubKey,\n    referralAccountPubKey,\n  }: InitializeReferralAccountVariable): Promise<Transaction> {\n    return await this.program.methods\n      .initializeReferralAccount({})\n      .accounts({\n        project: projectPubKey,\n        partner: partnerPubKey,\n        referralAccount: referralAccountPubKey,\n        payer: payerPubKey,\n      })\n      .transaction();\n  }\n\n  public async initializeReferralAccountWithName({\n    projectPubKey,\n    partnerPubKey,\n    payerPubKey,\n    name,\n  }: InitializeReferralAccountWithNameVariable): Promise<{\n    tx: Transaction;\n    referralAccountPubKey: PublicKey;\n  }> {\n    const referralAccountPubKey = this.getReferralAccountWithNamePubKey({\n      projectPubKey,\n      name,\n    });\n\n    const tx = await this.program.methods\n      .initializeReferralAccountWithName({ name })\n      .accounts({\n        project: projectPubKey,\n        partner: partnerPubKey,\n        referralAccount: referralAccountPubKey,\n        payer: payerPubKey,\n      })\n      .transaction();\n\n    return { tx, referralAccountPubKey };\n  }\n\n  public async transferReferralAccount({\n    newPartnerPubKey,\n    referralAccountPubKey,\n  }: TransferReferralAccountVariable): Promise<Transaction> {\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      referralAccountPubKey,\n    );\n\n    return await this.program.methods\n      .transferReferralAccount({})\n      .accounts({\n        partner: referralAccount.partner,\n        newPartner: newPartnerPubKey,\n        referralAccount: referralAccountPubKey,\n      })\n      .transaction();\n  }\n\n  public async initializeReferralTokenAccount({\n    payerPubKey,\n    referralAccountPubKey,\n    mint,\n  }: InitializeReferralTokenAccountVariable): Promise<{\n    tx: Transaction;\n    referralTokenAccountPubKey: PublicKey;\n  }> {\n    const mintAccount = await this.connection.getAccountInfo(mint);\n    if (!mintAccount) throw new Error(\"Invalid mint\");\n\n    if (\n      ![TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID].some((id) =>\n        id.equals(mintAccount.owner),\n      )\n    )\n      throw new Error(\"Invalid mint\");\n\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      referralAccountPubKey,\n    );\n\n    const referralTokenAccountPubKey = this.getReferralTokenAccountPubKey({\n      referralAccountPubKey,\n      mint,\n    });\n\n    const tx = await this.program.methods\n      .initializeReferralTokenAccount()\n      .accounts({\n        payer: payerPubKey,\n        project: referralAccount.project,\n        referralAccount: referralAccountPubKey,\n        referralTokenAccount: referralTokenAccountPubKey,\n        mint,\n        tokenProgram: mintAccount.owner,\n      })\n      .transaction();\n\n    return { tx, referralTokenAccountPubKey };\n  }\n\n  public async initializeReferralTokenAccountV2({\n    payerPubKey,\n    referralAccountPubKey,\n    mint,\n  }: InitializeReferralTokenAccountVariable): Promise<{\n    tx: Transaction;\n    tokenAccount: PublicKey;\n  }> {\n    const mintAccount = await this.connection.getAccountInfo(mint);\n    if (!mintAccount) throw new Error(\"Invalid mint\");\n\n    if (\n      ![TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID].some((id) =>\n        id.equals(mintAccount.owner),\n      )\n    )\n      throw new Error(\"Invalid mint\");\n\n    const tokenAccount = getAssociatedTokenAddressSync(\n      mint,\n      referralAccountPubKey,\n      true,\n      mintAccount.owner,\n    );\n\n    const ix = createAssociatedTokenAccountIdempotentInstruction(\n      payerPubKey,\n      tokenAccount,\n      referralAccountPubKey,\n      mint,\n      mintAccount.owner,\n    );\n\n    const tx = new Transaction().add(ix);\n\n    return { tx, tokenAccount };\n  }\n\n  public async claim({\n    payerPubKey,\n    referralAccountPubKey,\n    mint,\n  }: ClaimVariable): Promise<VersionedTransaction> {\n    const mintAccount = await this.connection.getAccountInfo(mint);\n    if (!mintAccount) throw new Error(\"Invalid mint\");\n\n    if (\n      ![TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID].some((id) =>\n        id.equals(mintAccount.owner),\n      )\n    )\n      throw new Error(\"Invalid mint\");\n\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      referralAccountPubKey,\n    );\n    const project = await this.program.account.project.fetch(\n      referralAccount.project,\n    );\n\n    const [\n      referralTokenAccountPubKey,\n      [partnerTokenAccount, createPartnerTokenAccountIx],\n      [projectAdminTokenAccount, createProjectAdminTokenAccountIx],\n    ] = await Promise.all([\n      this.getReferralTokenAccountPubKey({\n        referralAccountPubKey,\n        mint,\n      }),\n      getOrCreateATAInstruction(\n        mint,\n        referralAccount.partner,\n        this.connection,\n        payerPubKey,\n        undefined,\n        mintAccount.owner,\n      ),\n      getOrCreateATAInstruction(\n        mint,\n        project.admin,\n        this.connection,\n        payerPubKey,\n        undefined,\n        mintAccount.owner,\n      ),\n    ]);\n\n    let preInstructions: TransactionInstruction[] = [];\n    if (createPartnerTokenAccountIx)\n      preInstructions.push(createPartnerTokenAccountIx);\n    if (createProjectAdminTokenAccountIx) {\n      const projectAuthority = this.getProjectAuthorityPubKey(project);\n      const ix = await this.program.methods\n        .createAdminTokenAccount()\n        .accounts({\n          project: referralAccount.project,\n          projectAuthority,\n          admin: project.admin,\n          projectAdminTokenAccount: projectAdminTokenAccount,\n          mint,\n          tokenProgram: mintAccount.owner,\n        })\n        .instruction();\n\n      preInstructions.push(ix);\n    }\n\n    const transaction = await this.program.methods\n      .claim()\n      .accounts({\n        payer: payerPubKey,\n        project: referralAccount.project,\n        admin: project.admin,\n        projectAdminTokenAccount,\n        referralAccount: referralAccountPubKey,\n        referralTokenAccount: referralTokenAccountPubKey,\n        partner: referralAccount.partner,\n        partnerTokenAccount: partnerTokenAccount,\n        mint,\n        tokenProgram: mintAccount.owner,\n      })\n      .preInstructions(preInstructions)\n      .transaction();\n    const instructions = transaction.instructions;\n\n    // Get Address Lookup Table\n    const addressLookupTable = await this.connection.getAddressLookupTable(\n      new PublicKey(\"GBzQG2iFrPwXjGtCnwNt9S5eHd8xAR8jUMt3QDJpnjud\"),\n    );\n    const lookupTableAccount = addressLookupTable.value;\n\n    // Priority Fee Instructions\n    const { units, microLamports } =\n      await feeService.getOptimalComputeUnitLimitAndPrice({\n        instructions: transaction.instructions,\n        payer: payerPubKey,\n        lookupTables: [lookupTableAccount],\n      });\n    instructions.unshift(\n      ComputeBudgetProgram.setComputeUnitPrice({ microLamports }),\n    );\n    if (units) {\n      instructions.unshift(ComputeBudgetProgram.setComputeUnitLimit({ units }));\n    }\n\n    // Compile to V0 Message\n    const blockhash = (await this.connection.getLatestBlockhash()).blockhash;\n    const messageV0 = new TransactionMessage({\n      payerKey: payerPubKey,\n      instructions,\n      recentBlockhash: blockhash,\n    }).compileToV0Message();\n\n    return new VersionedTransaction(messageV0);\n  }\n\n  public async claimV2({\n    payerPubKey,\n    referralAccountPubKey,\n    mint,\n  }: ClaimVariable): Promise<VersionedTransaction> {\n    const mintAccount = await this.connection.getAccountInfo(mint);\n    if (!mintAccount) throw new Error(\"Invalid mint\");\n\n    if (\n      ![TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID].some((id) =>\n        id.equals(mintAccount.owner),\n      )\n    )\n      throw new Error(\"Invalid mint\");\n\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      referralAccountPubKey,\n    );\n    const project = await this.program.account.project.fetch(\n      referralAccount.project,\n    );\n\n    const [\n      referralTokenAccountPubKey,\n      [partnerTokenAccount, createPartnerTokenAccountIx],\n      [projectAdminTokenAccount, createProjectAdminTokenAccountIx],\n    ] = await Promise.all([\n      this.getReferralTokenAccountPubKeyV2({\n        referralAccountPubKey,\n        mint,\n        tokenProgramId: mintAccount.owner,\n      }),\n      getOrCreateATAInstruction(\n        mint,\n        referralAccount.partner,\n        this.connection,\n        payerPubKey,\n        undefined,\n        mintAccount.owner,\n      ),\n      getOrCreateATAInstruction(\n        mint,\n        project.admin,\n        this.connection,\n        payerPubKey,\n        undefined,\n        mintAccount.owner,\n      ),\n    ]);\n\n    let preInstructions: TransactionInstruction[] = [];\n    if (createPartnerTokenAccountIx)\n      preInstructions.push(createPartnerTokenAccountIx);\n    if (createProjectAdminTokenAccountIx) {\n      const projectAuthority = this.getProjectAuthorityPubKey(project);\n      const ix = await this.program.methods\n        .createAdminTokenAccount()\n        .accounts({\n          project: referralAccount.project,\n          projectAuthority,\n          admin: project.admin,\n          projectAdminTokenAccount: projectAdminTokenAccount,\n          mint,\n          tokenProgram: mintAccount.owner,\n        })\n        .instruction();\n\n      preInstructions.push(ix);\n    }\n\n    const transaction = await this.program.methods\n      .claimV2()\n      .accountsStrict({\n        payer: payerPubKey,\n        project: referralAccount.project,\n        admin: project.admin,\n        projectAdminTokenAccount,\n        referralAccount: referralAccountPubKey,\n        referralTokenAccount: referralTokenAccountPubKey,\n        partner: referralAccount.partner,\n        partnerTokenAccount: partnerTokenAccount,\n        mint,\n        tokenProgram: mintAccount.owner,\n        systemProgram: SystemProgram.programId,\n        associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n      })\n      .preInstructions(preInstructions)\n      .transaction();\n    const instructions = transaction.instructions;\n\n    // Get Address Lookup Table\n    const addressLookupTable = await this.connection.getAddressLookupTable(\n      new PublicKey(\"GBzQG2iFrPwXjGtCnwNt9S5eHd8xAR8jUMt3QDJpnjud\"),\n    );\n    const lookupTableAccount = addressLookupTable.value;\n\n    // Priority Fee Instructions\n    const { units, microLamports } =\n      await feeService.getOptimalComputeUnitLimitAndPrice({\n        instructions: transaction.instructions,\n        payer: payerPubKey,\n        lookupTables: [lookupTableAccount],\n      });\n    instructions.unshift(\n      ComputeBudgetProgram.setComputeUnitPrice({ microLamports }),\n    );\n    if (units) {\n      instructions.unshift(ComputeBudgetProgram.setComputeUnitLimit({ units }));\n    }\n\n    // Compile to V0 Message\n    const blockhash = (await this.connection.getLatestBlockhash()).blockhash;\n    const messageV0 = new TransactionMessage({\n      payerKey: payerPubKey,\n      instructions,\n      recentBlockhash: blockhash,\n    }).compileToV0Message();\n\n    return new VersionedTransaction(messageV0);\n  }\n\n  public async claimAll({\n    payerPubKey,\n    referralAccountPubKey,\n    strategy,\n  }: ClaimAllVariable): Promise<VersionedTransaction[]> {\n    const blockhash = (await this.connection.getLatestBlockhash()).blockhash;\n    const lookupTableAccount = await this.connection\n      .getAddressLookupTable(\n        new PublicKey(\"GBzQG2iFrPwXjGtCnwNt9S5eHd8xAR8jUMt3QDJpnjud\"),\n      )\n      .then((res) => res.value);\n\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      referralAccountPubKey,\n    );\n    const project = await this.program.account.project.fetch(\n      referralAccount.project,\n    );\n    const projectAuthority = this.getProjectAuthorityPubKey(project);\n\n    const { tokenAccounts, token2022Accounts } = strategy\n      ? await this.getReferralTokenAccountsWithStrategy(\n          referralAccountPubKey.toString(),\n          strategy,\n        )\n      : await this.getReferralTokenAccounts(referralAccountPubKey.toString());\n\n    const vtTxs = await Promise.all(\n      [tokenAccounts, token2022Accounts].map(async (accounts, idx) => {\n        const tokenProgramId =\n          idx === 0 ? TOKEN_PROGRAM_ID : TOKEN_2022_PROGRAM_ID;\n        const tokensWithAmount = accounts.filter(\n          (item) => item.account.amount > 0 && item.account.state === 1,\n        );\n\n        const claimParams = await Promise.all(\n          tokensWithAmount.map(async (token) => {\n            const referralTokenAccountPubKey =\n              this.getReferralTokenAccountPubKey({\n                referralAccountPubKey,\n                mint: token.account.mint,\n              });\n\n            const preInstructions: TransactionInstruction[] = [];\n\n            const partnerTokenAccount = getAssociatedTokenAddressSync(\n              token.account.mint,\n              referralAccount.partner,\n              true,\n              tokenProgramId,\n            );\n            preInstructions.push(\n              createAssociatedTokenAccountIdempotentInstruction(\n                payerPubKey,\n                partnerTokenAccount,\n                referralAccount.partner,\n                token.account.mint,\n                tokenProgramId,\n              ),\n            );\n\n            const projectAdminTokenAccount = getAssociatedTokenAddressSync(\n              token.account.mint,\n              project.admin,\n              true,\n              tokenProgramId,\n            );\n            const ix = await this.program.methods\n              .createAdminTokenAccount()\n              .accounts({\n                project: referralAccount.project,\n                projectAuthority,\n                admin: project.admin,\n                projectAdminTokenAccount,\n                mint: token.account.mint,\n                tokenProgram: tokenProgramId,\n              })\n              .instruction();\n\n            preInstructions.push(ix);\n\n            return {\n              referralTokenAccountPubKey,\n              projectAdminTokenAccount,\n              partnerTokenAccount,\n              preInstructions,\n              mint: token.account.mint,\n            };\n          }),\n        );\n\n        const txs: VersionedTransaction[] = [];\n        let instructions: TransactionInstruction[] = [];\n        let chunk = 0;\n        for (const {\n          referralTokenAccountPubKey,\n          projectAdminTokenAccount,\n          partnerTokenAccount,\n          mint,\n          preInstructions,\n        } of claimParams) {\n          const tx = await this.program.methods\n            .claim()\n            .accounts({\n              payer: payerPubKey,\n              project: referralAccount.project,\n              admin: project.admin,\n              projectAdminTokenAccount,\n              referralAccount: referralAccountPubKey,\n              referralTokenAccount: referralTokenAccountPubKey,\n              partner: referralAccount.partner,\n              partnerTokenAccount: partnerTokenAccount,\n              mint,\n              tokenProgram: tokenProgramId,\n            })\n            .preInstructions(preInstructions)\n            .transaction();\n          instructions.push(...tx.instructions);\n\n          chunk += 1;\n\n          if (chunk === 4) {\n            // Priority Fee Instructions\n            const { units, microLamports } =\n              await feeService.getOptimalComputeUnitLimitAndPrice({\n                instructions,\n                payer: payerPubKey,\n                lookupTables: [lookupTableAccount],\n              });\n            instructions.unshift(\n              ComputeBudgetProgram.setComputeUnitPrice({ microLamports }),\n            );\n            if (units) {\n              instructions.unshift(\n                ComputeBudgetProgram.setComputeUnitLimit({ units }),\n              );\n            }\n\n            // Compile to V0 Message\n            const messageV0 = new TransactionMessage({\n              payerKey: payerPubKey,\n              instructions,\n              recentBlockhash: blockhash,\n            }).compileToV0Message([lookupTableAccount]);\n            chunk = 0;\n            instructions = [];\n\n            txs.push(new VersionedTransaction(messageV0));\n          }\n        }\n        return txs;\n      }),\n    );\n\n    return vtTxs.flat();\n  }\n\n  public async claimAllV2({\n    payerPubKey,\n    referralAccountPubKey,\n  }: ClaimAllVariable): Promise<VersionedTransaction[]> {\n    const blockhash = (await this.connection.getLatestBlockhash()).blockhash;\n    const lookupTableAccount = await this.connection\n      .getAddressLookupTable(\n        new PublicKey(\"GBzQG2iFrPwXjGtCnwNt9S5eHd8xAR8jUMt3QDJpnjud\"),\n      )\n      .then((res) => res.value);\n\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      referralAccountPubKey,\n    );\n    const project = await this.program.account.project.fetch(\n      referralAccount.project,\n    );\n    const projectAuthority = this.getProjectAuthorityPubKey(project);\n\n    const { tokenAccounts, token2022Accounts } =\n      await this.getReferralTokenAccountsV2(referralAccountPubKey.toString());\n\n    const vtTxs = await Promise.all(\n      [tokenAccounts, token2022Accounts].map(async (accounts, idx) => {\n        const tokenProgramId =\n          idx === 0 ? TOKEN_PROGRAM_ID : TOKEN_2022_PROGRAM_ID;\n        const tokensWithAmount = accounts.filter(\n          (item) => item.account.amount > 0 && item.account.state === 1,\n        );\n\n        const claimParams = await Promise.all(\n          tokensWithAmount.map(async (token) => {\n            const preInstructions: TransactionInstruction[] = [];\n\n            const partnerTokenAccount = getAssociatedTokenAddressSync(\n              token.account.mint,\n              referralAccount.partner,\n              true,\n              tokenProgramId,\n            );\n            preInstructions.push(\n              createAssociatedTokenAccountIdempotentInstruction(\n                payerPubKey,\n                partnerTokenAccount,\n                referralAccount.partner,\n                token.account.mint,\n                tokenProgramId,\n              ),\n            );\n\n            const projectAdminTokenAccount = getAssociatedTokenAddressSync(\n              token.account.mint,\n              project.admin,\n              true,\n              tokenProgramId,\n            );\n            const ix = await this.program.methods\n              .createAdminTokenAccount()\n              .accounts({\n                project: referralAccount.project,\n                projectAuthority,\n                admin: project.admin,\n                projectAdminTokenAccount,\n                mint: token.account.mint,\n                tokenProgram: tokenProgramId,\n              })\n              .instruction();\n\n            preInstructions.push(ix);\n\n            return {\n              projectAdminTokenAccount,\n              partnerTokenAccount,\n              preInstructions,\n              mint: token.account.mint,\n              referralTokenAccount: token.pubkey, // Use ATA directly\n            };\n          }),\n        );\n\n        const txs: VersionedTransaction[] = [];\n        let instructions: TransactionInstruction[] = [];\n        let chunk = 0;\n        for (const {\n          projectAdminTokenAccount,\n          partnerTokenAccount,\n          mint,\n          preInstructions,\n          referralTokenAccount,\n        } of claimParams) {\n          const tx = await this.program.methods\n            .claimV2()\n            .accounts({\n              payer: payerPubKey,\n              project: referralAccount.project,\n              admin: project.admin,\n              projectAdminTokenAccount,\n              referralAccount: referralAccountPubKey,\n              referralTokenAccount,\n              partner: referralAccount.partner,\n              partnerTokenAccount,\n              mint,\n              tokenProgram: tokenProgramId,\n              systemProgram: SystemProgram.programId,\n              associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n            })\n            .preInstructions(preInstructions)\n            .transaction();\n          instructions.push(...tx.instructions);\n\n          chunk += 1;\n\n          if (chunk === 4) {\n            // Priority Fee Instructions\n            const { units, microLamports } =\n              await feeService.getOptimalComputeUnitLimitAndPrice({\n                instructions,\n                payer: payerPubKey,\n                lookupTables: [lookupTableAccount],\n              });\n            instructions.unshift(\n              ComputeBudgetProgram.setComputeUnitPrice({ microLamports }),\n            );\n            if (units) {\n              instructions.unshift(\n                ComputeBudgetProgram.setComputeUnitLimit({ units }),\n              );\n            }\n\n            // Compile to V0 Message\n            const messageV0 = new TransactionMessage({\n              payerKey: payerPubKey,\n              instructions,\n              recentBlockhash: blockhash,\n            }).compileToV0Message([lookupTableAccount]);\n            chunk = 0;\n            instructions = [];\n\n            txs.push(new VersionedTransaction(messageV0));\n          }\n        }\n        if (instructions.length > 0) {\n          const messageV0 = new TransactionMessage({\n            payerKey: payerPubKey,\n            instructions,\n            recentBlockhash: blockhash,\n          }).compileToV0Message([lookupTableAccount]);\n\n          txs.push(new VersionedTransaction(messageV0));\n        }\n\n        return txs;\n      }),\n    );\n\n    return vtTxs.flat();\n  }\n\n  public async claimPartially({\n    payerPubKey,\n    referralAccountPubKey,\n    withdrawalableTokenAddress,\n  }: ClaimPartiallyVariable): Promise<VersionedTransaction[]> {\n    const blockhash = (await this.connection.getLatestBlockhash()).blockhash;\n    const lookupTableAccount = await this.connection\n      .getAddressLookupTable(\n        new PublicKey(\"GBzQG2iFrPwXjGtCnwNt9S5eHd8xAR8jUMt3QDJpnjud\"),\n      )\n      .then((res) => res.value);\n\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      referralAccountPubKey,\n    );\n    const project = await this.program.account.project.fetch(\n      referralAccount.project,\n    );\n    const projectAuthority = this.getProjectAuthorityPubKey(project);\n\n    const result = await this.connection.getMultipleAccountsInfo(\n      withdrawalableTokenAddress,\n    );\n\n    const claimInstructionParams = await Promise.all(\n      result.map(async (item) => {\n        const tokenProgramId = item.owner;\n        const tokenAccountData = AccountLayout.decode(\n          new Uint8Array(item.data),\n        );\n\n        const referralTokenAccountPubKey = this.getReferralTokenAccountPubKey({\n          referralAccountPubKey,\n          mint: tokenAccountData.mint,\n        });\n\n        const preInstructions: TransactionInstruction[] = [];\n\n        const partnerTokenAccount = getAssociatedTokenAddressSync(\n          tokenAccountData.mint,\n          referralAccount.partner,\n          true,\n          tokenProgramId,\n        );\n        preInstructions.push(\n          createAssociatedTokenAccountIdempotentInstruction(\n            payerPubKey,\n            partnerTokenAccount,\n            referralAccount.partner,\n            tokenAccountData.mint,\n            tokenProgramId,\n          ),\n        );\n\n        const projectAdminTokenAccount = getAssociatedTokenAddressSync(\n          tokenAccountData.mint,\n          project.admin,\n          true,\n          tokenProgramId,\n        );\n\n        const ix = await this.program.methods\n          .createAdminTokenAccount()\n          .accounts({\n            project: referralAccount.project,\n            projectAuthority,\n            admin: project.admin,\n            projectAdminTokenAccount,\n            mint: tokenAccountData.mint,\n            tokenProgram: tokenProgramId,\n          })\n          .instruction();\n\n        preInstructions.push(ix);\n\n        return {\n          referralTokenAccountPubKey,\n          projectAdminTokenAccount,\n          partnerTokenAccount,\n          preInstructions,\n          tokenProgramId,\n          mint: tokenAccountData.mint,\n        };\n      }),\n    );\n\n    const chunkedInstructions = chunk(claimInstructionParams, 4);\n\n    const txs: VersionedTransaction[] = await Promise.all(\n      chunkedInstructions.map(async (chunkParams) => {\n        let instructions: TransactionInstruction[] = [];\n\n        await Promise.all(\n          chunkParams.map(\n            async ({\n              referralTokenAccountPubKey,\n              projectAdminTokenAccount,\n              partnerTokenAccount,\n              mint,\n              preInstructions,\n              tokenProgramId,\n            }) => {\n              const tx = await this.program.methods\n                .claim()\n                .accounts({\n                  payer: payerPubKey,\n                  project: referralAccount.project,\n                  admin: project.admin,\n                  projectAdminTokenAccount,\n                  referralAccount: referralAccountPubKey,\n                  referralTokenAccount: referralTokenAccountPubKey,\n                  partner: referralAccount.partner,\n                  partnerTokenAccount: partnerTokenAccount,\n                  mint,\n                  tokenProgram: tokenProgramId,\n                })\n                .preInstructions(preInstructions)\n                .transaction();\n\n              instructions.push(...tx.instructions);\n            },\n          ),\n        );\n\n        // Priority Fee Instructions\n        const { units, microLamports } =\n          await feeService.getOptimalComputeUnitLimitAndPrice({\n            instructions,\n            payer: payerPubKey,\n            lookupTables: [lookupTableAccount],\n          });\n        instructions.unshift(\n          ComputeBudgetProgram.setComputeUnitPrice({ microLamports }),\n        );\n        if (units) {\n          instructions.unshift(\n            ComputeBudgetProgram.setComputeUnitLimit({ units }),\n          );\n        }\n\n        // Compile to V0 Message\n        const messageV0 = new TransactionMessage({\n          payerKey: payerPubKey,\n          instructions,\n          recentBlockhash: blockhash,\n        }).compileToV0Message([lookupTableAccount]);\n\n        instructions = [];\n\n        return new VersionedTransaction(messageV0);\n      }),\n    );\n\n    return txs;\n  }\n}\n","import { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply(0, new Array(Math.ceil(array.length / size))).map(\n    (_: any, index: number) => array.slice(index * size, (index + 1) * size),\n  );\n}\n\nexport async function chunkedGetMultipleAccountInfos(\n  connection: Connection,\n  pks: PublicKey[],\n  chunkSize: number = 100,\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  return (\n    await Promise.all(\n      chunks(pks, chunkSize).map((chunk) =>\n        connection.getMultipleAccountsInfo(chunk),\n      ),\n    )\n  ).flat();\n}\n","import { clusterApiUrl, PublicKey } from \"@solana/web3.js\";\n\nexport const PROGRAM_ID = new PublicKey(\n  \"REFER4ZgmyYx9c6He5XfaTMiGfdLwRnkV4RPp9t9iF3\",\n);\n\nexport const RPC_URL =\n  process.env.RPC_URL ||\n  process.env.NEXT_PUBLIC_RPC_URL ||\n  clusterApiUrl(\"mainnet-beta\");\n","import {\n  AddressLookupTableAccount,\n  ComputeBudgetProgram,\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n  TransactionMessage,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\n\nimport { RPC_URL } from \"./constant\";\n\ninterface Fee {\n  /**\n   * @description medium\n   */\n  m: number;\n  /**\n   * @description high\n   */\n  h: number;\n  /**\n   * @description very high\n   */\n  vh: number;\n}\n\ninterface MarketReferenceFee {\n  claim: number;\n  jup: Fee;\n  jup2: Fee;\n  loAndDCA: number;\n  referral: number;\n  perps: Fee;\n  swapFee: number;\n  lastUpdatedAt: number;\n}\n\ninterface GetOptimalComputeUnitLimitAndPricePayload {\n  instructions: TransactionInstruction[];\n  payer: PublicKey;\n  lookupTables: AddressLookupTableAccount[];\n}\n\ninterface GetOptimalComputeUnitLimitAndPriceResponse {\n  units: number;\n  microLamports: number;\n}\n\ninterface FeeService {\n  getOptimalComputeUnitLimitAndPrice: (\n    payload: GetOptimalComputeUnitLimitAndPricePayload,\n  ) => Promise<GetOptimalComputeUnitLimitAndPriceResponse>;\n}\n\nclass FeeServiceImpl implements FeeService {\n  // --------------------\n  // Properties\n  // --------------------\n  private connection: Connection;\n\n  constructor() {\n    this.connection = new Connection(RPC_URL);\n  }\n\n  // --------------------\n  // API\n  // --------------------\n  private getMarketReferenceFee = async (): Promise<MarketReferenceFee> => {\n    const data = (\n      await fetch(\"https://cache.jup.ag/reference-fees\")\n    ).json() as unknown as MarketReferenceFee;\n    return data;\n  };\n\n  // --------------------\n  // Helper methods\n  // --------------------\n\n  /**\n   *\n   * Code snippets from the Solana documentation\n   * @see https://solana.com/developers/guides/advanced/how-to-request-optimal-compute#how-to-request-compute-budget\n   */\n  private getSimulationUnits = async (\n    payload: GetOptimalComputeUnitLimitAndPricePayload,\n  ) => {\n    const { instructions, payer, lookupTables } = payload;\n\n    const testInstructions = [\n      ComputeBudgetProgram.setComputeUnitLimit({ units: 1_400_000 }),\n      ...instructions,\n    ];\n\n    const testVersionedTxn = new VersionedTransaction(\n      new TransactionMessage({\n        instructions: testInstructions,\n        payerKey: payer,\n        recentBlockhash: PublicKey.default.toString(),\n      }).compileToV0Message(lookupTables),\n    );\n\n    const simulation = await this.connection.simulateTransaction(\n      testVersionedTxn,\n      {\n        replaceRecentBlockhash: true,\n        sigVerify: false,\n      },\n    );\n    if (simulation.value.err) {\n      return undefined;\n    }\n    return simulation.value.unitsConsumed;\n  };\n\n  private addMarginErrorForComputeUnitLimit = (units: number, margin: number) =>\n    Math.floor(units * margin);\n\n  private getReferralReferenceFeeInMicroLamports = async () => {\n    const marketReferenceFeeInLamports = await this.getMarketReferenceFee();\n    return marketReferenceFeeInLamports.referral;\n  };\n\n  // --------------------\n  // Main methods\n  // --------------------\n  getOptimalComputeUnitLimitAndPrice: FeeService[\"getOptimalComputeUnitLimitAndPrice\"] =\n    async (payload) => {\n      // Unit\n      const simulationUnits = await this.getSimulationUnits(payload);\n      /**\n       * Best practices to always add a margin error to the simulation units (10% ~ 20%)\n       * @see https://solana.com/developers/guides/advanced/how-to-request-optimal-compute#special-considerations\n       */\n      const simulationUnitsWithMarginError =\n        this.addMarginErrorForComputeUnitLimit(simulationUnits, 1.2);\n\n      // Price\n      const referenceFeeInMicroLamports =\n        await this.getReferralReferenceFeeInMicroLamports();\n\n      return {\n        // `computeUnitLimit`\n        units: simulationUnitsWithMarginError,\n        // `computeUnitPrice`\n        microLamports: referenceFeeInMicroLamports,\n      };\n    };\n}\n\nexport const feeService = new FeeServiceImpl();\n","export type Referral = {\n  version: \"0.1.0\";\n  name: \"referral\";\n  instructions: [\n    {\n      name: \"initializeProject\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"base\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"project\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"InitializeProjectParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"initializeReferralAccount\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"partner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"InitializeReferralAccountParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"initializeReferralAccountWithName\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"partner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"InitializeReferralAccountWithNameParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"updateProject\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"project\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"UpdateProjectParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"transferProject\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"newAdmin\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"project\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"TransferProjectParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"updateReferralAccount\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"UpdateReferralAccountParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"transferReferralAccount\";\n      accounts: [\n        {\n          name: \"partner\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"newPartner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"TransferReferralAccountParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"initializeReferralTokenAccount\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"claim\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"projectAdminTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"partner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"partnerTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"associatedTokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"createAdminTokenAccount\";\n      accounts: [\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"projectAuthority\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"projectAdminTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"associatedTokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"withdrawFromProject\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"projectAuthority\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"WithdrawFromProjectParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"claimV2\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"projectAdminTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"partner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"partnerTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"associatedTokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"closeReferralTokenAccountV2\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"partner\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"associatedTokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n  ];\n  accounts: [\n    {\n      name: \"project\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"base\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"admin\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"name\";\n            type: \"string\";\n          },\n          {\n            name: \"defaultShareBps\";\n            type: \"u16\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"referralAccount\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"partner\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"project\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"shareBps\";\n            type: \"u16\";\n          },\n          {\n            name: \"name\";\n            type: {\n              option: \"string\";\n            };\n          },\n        ];\n      };\n    },\n  ];\n  types: [\n    {\n      name: \"InitializeProjectParams\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"name\";\n            type: \"string\";\n          },\n          {\n            name: \"defaultShareBps\";\n            type: \"u16\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"InitializeReferralAccountWithNameParams\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"name\";\n            type: \"string\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"InitializeReferralAccountParams\";\n      type: {\n        kind: \"struct\";\n        fields: [];\n      };\n    },\n    {\n      name: \"TransferProjectParams\";\n      type: {\n        kind: \"struct\";\n        fields: [];\n      };\n    },\n    {\n      name: \"TransferReferralAccountParams\";\n      type: {\n        kind: \"struct\";\n        fields: [];\n      };\n    },\n    {\n      name: \"UpdateProjectParams\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"name\";\n            type: {\n              option: \"string\";\n            };\n          },\n          {\n            name: \"defaultShareBps\";\n            type: {\n              option: \"u16\";\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: \"UpdateReferralAccountParams\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"shareBps\";\n            type: \"u16\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"WithdrawFromProjectParams\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"amount\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n  ];\n  events: [\n    {\n      name: \"InitializeProjectEvent\";\n      fields: [\n        {\n          name: \"project\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"admin\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"name\";\n          type: \"string\";\n          index: false;\n        },\n        {\n          name: \"defaultShareBps\";\n          type: \"u16\";\n          index: false;\n        },\n      ];\n    },\n    {\n      name: \"UpdateProjectEvent\";\n      fields: [\n        {\n          name: \"project\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"name\";\n          type: \"string\";\n          index: false;\n        },\n        {\n          name: \"defaultShareBps\";\n          type: \"u16\";\n          index: false;\n        },\n      ];\n    },\n    {\n      name: \"InitializeReferralAccountEvent\";\n      fields: [\n        {\n          name: \"project\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"partner\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"referralAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"shareBps\";\n          type: \"u16\";\n          index: false;\n        },\n        {\n          name: \"name\";\n          type: {\n            option: \"string\";\n          };\n          index: false;\n        },\n      ];\n    },\n    {\n      name: \"UpdateReferralAccountEvent\";\n      fields: [\n        {\n          name: \"referralAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"shareBps\";\n          type: \"u16\";\n          index: false;\n        },\n      ];\n    },\n    {\n      name: \"InitializeReferralTokenAccountEvent\";\n      fields: [\n        {\n          name: \"project\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"referralAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"referralTokenAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n      ];\n    },\n    {\n      name: \"ClaimEvent\";\n      fields: [\n        {\n          name: \"project\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"projectAdminTokenAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"referralAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"referralTokenAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"partnerTokenAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"referralAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"projectAmount\";\n          type: \"u64\";\n          index: false;\n        },\n      ];\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: \"InvalidCalculation\";\n    },\n    {\n      code: 6001;\n      name: \"InvalidSharePercentage\";\n    },\n    {\n      code: 6002;\n      name: \"NameTooLong\";\n    },\n  ];\n};\n\nexport const IDL: Referral = {\n  version: \"0.1.0\",\n  name: \"referral\",\n  instructions: [\n    {\n      name: \"initializeProject\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"base\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"project\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"InitializeProjectParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"initializeReferralAccount\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"partner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"InitializeReferralAccountParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"initializeReferralAccountWithName\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"partner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"InitializeReferralAccountWithNameParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"updateProject\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"project\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"UpdateProjectParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"transferProject\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"newAdmin\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"project\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"TransferProjectParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"updateReferralAccount\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"UpdateReferralAccountParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"transferReferralAccount\",\n      accounts: [\n        {\n          name: \"partner\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"newPartner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"TransferReferralAccountParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"initializeReferralTokenAccount\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"claim\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"projectAdminTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"partner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"partnerTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"associatedTokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"createAdminTokenAccount\",\n      accounts: [\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"projectAuthority\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"projectAdminTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"associatedTokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"withdrawFromProject\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"projectAuthority\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"WithdrawFromProjectParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"claimV2\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"projectAdminTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"partner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"partnerTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"associatedTokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"closeReferralTokenAccountV2\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"partner\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"associatedTokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: \"project\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"base\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"admin\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            name: \"defaultShareBps\",\n            type: \"u16\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"referralAccount\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"partner\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"project\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"shareBps\",\n            type: \"u16\",\n          },\n          {\n            name: \"name\",\n            type: {\n              option: \"string\",\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"InitializeProjectParams\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            name: \"defaultShareBps\",\n            type: \"u16\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"InitializeReferralAccountWithNameParams\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"name\",\n            type: \"string\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"InitializeReferralAccountParams\",\n      type: {\n        kind: \"struct\",\n        fields: [],\n      },\n    },\n    {\n      name: \"TransferProjectParams\",\n      type: {\n        kind: \"struct\",\n        fields: [],\n      },\n    },\n    {\n      name: \"TransferReferralAccountParams\",\n      type: {\n        kind: \"struct\",\n        fields: [],\n      },\n    },\n    {\n      name: \"UpdateProjectParams\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"name\",\n            type: {\n              option: \"string\",\n            },\n          },\n          {\n            name: \"defaultShareBps\",\n            type: {\n              option: \"u16\",\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"UpdateReferralAccountParams\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"shareBps\",\n            type: \"u16\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"WithdrawFromProjectParams\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"amount\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n  ],\n  events: [\n    {\n      name: \"InitializeProjectEvent\",\n      fields: [\n        {\n          name: \"project\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"admin\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"name\",\n          type: \"string\",\n          index: false,\n        },\n        {\n          name: \"defaultShareBps\",\n          type: \"u16\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"UpdateProjectEvent\",\n      fields: [\n        {\n          name: \"project\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"name\",\n          type: \"string\",\n          index: false,\n        },\n        {\n          name: \"defaultShareBps\",\n          type: \"u16\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"InitializeReferralAccountEvent\",\n      fields: [\n        {\n          name: \"project\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"partner\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"referralAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"shareBps\",\n          type: \"u16\",\n          index: false,\n        },\n        {\n          name: \"name\",\n          type: {\n            option: \"string\",\n          },\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"UpdateReferralAccountEvent\",\n      fields: [\n        {\n          name: \"referralAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"shareBps\",\n          type: \"u16\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"InitializeReferralTokenAccountEvent\",\n      fields: [\n        {\n          name: \"project\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"referralAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"referralTokenAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"ClaimEvent\",\n      fields: [\n        {\n          name: \"project\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"projectAdminTokenAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"referralAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"referralTokenAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"partnerTokenAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"referralAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"projectAmount\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: \"InvalidCalculation\",\n    },\n    {\n      code: 6001,\n      name: \"InvalidSharePercentage\",\n    },\n    {\n      code: 6002,\n      name: \"NameTooLong\",\n    },\n  ],\n};\n","import {\n  createAssociatedTokenAccountInstruction,\n  getAssociatedTokenAddressSync,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey, TransactionInstruction } from \"@solana/web3.js\";\n\nexport const getOrCreateATAInstruction = async (\n  tokenMint: PublicKey,\n  owner: PublicKey,\n  connection: Connection,\n  payer: PublicKey = owner,\n  allowOwnerOffCurve = true,\n  tokenProgram: PublicKey = TOKEN_PROGRAM_ID,\n): Promise<[PublicKey, TransactionInstruction?]> => {\n  let toAccount;\n  try {\n    toAccount = getAssociatedTokenAddressSync(\n      tokenMint,\n      owner,\n      allowOwnerOffCurve,\n      tokenProgram,\n    );\n    const account = await connection.getAccountInfo(toAccount);\n\n    if (!account) {\n      const ix = createAssociatedTokenAccountInstruction(\n        payer,\n        toAccount,\n        owner,\n        tokenMint,\n        tokenProgram,\n      );\n      return [toAccount, ix];\n    }\n    return [toAccount, undefined];\n  } catch (e) {\n    /* handle error */\n    console.error(\"Error::getOrCreateATAInstruction\", e);\n    throw e;\n  }\n};\n","import { GetProgramAccountsFilter, PublicKey } from \"@solana/web3.js\";\n\nexport const projectAdminFilter = (publicKey: PublicKey) => {\n  return {\n    memcmp: {\n      offset: 8 + 32,\n      bytes: publicKey.toBase58(),\n    },\n  };\n};\n\nexport const referralAccountPartnerFilter = (\n  publicKey: PublicKey,\n): GetProgramAccountsFilter => {\n  return {\n    memcmp: {\n      offset: 8,\n      bytes: publicKey.toBase58(),\n    },\n  };\n};\n\nexport const referralAccountProjectFilter = (\n  publicKey: PublicKey,\n): GetProgramAccountsFilter => {\n  return {\n    memcmp: {\n      offset: 8 + 32,\n      bytes: publicKey.toBase58(),\n    },\n  };\n};\n"],"mappings":"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","names":["getAssociatedTokenAddressSync","TOKEN_PROGRAM_ID","ComputeBudgetProgram","PublicKey","TransactionMessage","VersionedTransaction","chunk","PublicKey","PublicKey","PublicKey","getAssociatedTokenAddressSync","TOKEN_PROGRAM_ID","tokens","ComputeBudgetProgram","TransactionMessage","VersionedTransaction","chunk","_0"]}